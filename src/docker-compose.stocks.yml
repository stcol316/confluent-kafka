services:

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: ${BROKER_NAME}
    container_name: ${BROKER_NAME}
    ports:
      - ${KAFKA_CLIENT_PORT}:${KAFKA_CLIENT_PORT}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${BROKER_NAME}:${BROKER_LISTENER_PORT},PLAINTEXT_HOST://localhost:${KAFKA_CLIENT_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${BROKER_NAME}:${BROKER_CONTROLLER_PORT}
      KAFKA_LISTENERS: PLAINTEXT://${BROKER_NAME}:${BROKER_LISTENER_PORT},CONTROLLER://${BROKER_NAME}:${BROKER_CONTROLLER_PORT},PLAINTEXT_HOST://0.0.0.0:${KAFKA_CLIENT_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server ${BROKER_NAME}:${BROKER_LISTENER_PORT} --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  stock-producer:
    build:
      context: .
      dockerfile: ./producers/Dockerfile
    container_name: producer
    depends_on:
      broker:
        condition: service_healthy
      stock-processor:
        condition: service_started
    environment:
      KAFKA_BROKER: ${BROKER_NAME}:${BROKER_LISTENER_PORT}
    command: python stock_producer.py

  stock-to-influx:
    build:
      context: .
      dockerfile: ./consumers/Dockerfile
    container_name: stock-to-influx
    depends_on:
      broker:
        condition: service_healthy
    environment:
      KAFKA_BROKER: ${BROKER_NAME}:${BROKER_LISTENER_PORT}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_URL: ${INFLUXDB_URL}
    command: python stock_to_influxdb.py

  jobmanager:
    image: flink:latest
    container_name: jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        state.checkpoints.dir: file:///opt/flink/checkpoints
        state.savepoints.dir: file:///opt/flink/savepoints
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - flink-savepoints:/opt/flink/savepoints
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 30s
      timeout: 10s
      retries: 3

  taskmanager:
    image: flink:latest
    container_name: taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        taskmanager.memory.process.size: 2048m
        taskmanager.memory.flink.size: 1280m
        taskmanager.memory.task.heap.size: 512m
        taskmanager.memory.framework.heap.size: 128m
        taskmanager.memory.framework.off-heap.size: 128m
        taskmanager.memory.managed.size: 256m
        taskmanager.memory.jvm-overhead.min: 192m
        taskmanager.memory.jvm-overhead.max: 512m
        taskmanager.memory.jvm-metaspace.size: 256m
        state.checkpoints.dir: file:///opt/flink/checkpoints
        state.savepoints.dir: file:///opt/flink/savepoints
    volumes:
      - flink-checkpoints:/opt/flink/checkpoints
      - flink-savepoints:/opt/flink/savepoints

  stock-processor:
    build:
      context: .
      dockerfile: ./processors/Dockerfile
    container_name: stock-processor
    depends_on:
      broker:
        condition: service_healthy
      jobmanager:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=${BROKER_NAME}:${BROKER_LISTENER_PORT}
      - FLINK_JOBMANAGER_HOST=jobmanager
      - FLINK_JOBMANAGER_PORT=6123
    volumes:
      - ./processors:/opt/processors
      - flink-checkpoints:/opt/flink/checkpoints
      - flink-savepoints:/opt/flink/savepoints
    command: python stock_processor.py

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_ADMIN_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://influxdb:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUX_STOCK_MEASUREMENT=${INFLUX_STOCK_MEASUREMENT}
    depends_on:
      influxdb:
        condition: service_healthy

  alert-consumer:
    build:
      context: .
      dockerfile: ./consumers/Dockerfile
    container_name: alert-consumer
    depends_on:
      broker:
        condition: service_healthy
      stock-processor:
        condition: service_started
    environment:
      KAFKA_BROKER: ${BROKER_NAME}:${BROKER_LISTENER_PORT}
    command: python alert-consumer.py

volumes:
  influxdb-data:
  influxdb-config:
  grafana-data:
  flink-checkpoints:
  flink-savepoints: